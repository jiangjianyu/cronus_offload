#include <assert.h>
#include <stdio.h>

#include "cuda.h"
#include "cuda_driver_header.h"

#define _CASE(x) case x: *pStr = #x; break;

CUresult CUDAAPI cuGetErrorString(CUresult error, const char **pStr) {
    return cuGetErrorName(error, pStr);
}

CUresult CUDAAPI cuGetErrorName(CUresult error, const char **pStr) {
    switch (error) {
        _CASE(CUDA_SUCCESS)
        _CASE(CUDA_ERROR_INVALID_VALUE)
        _CASE(CUDA_ERROR_OUT_OF_MEMORY)
        _CASE(CUDA_ERROR_NOT_INITIALIZED)
        _CASE(CUDA_ERROR_DEINITIALIZED)
        _CASE(CUDA_ERROR_PROFILER_DISABLED)
        _CASE(CUDA_ERROR_PROFILER_NOT_INITIALIZED)
        _CASE(CUDA_ERROR_PROFILER_ALREADY_STARTED)
        _CASE(CUDA_ERROR_PROFILER_ALREADY_STOPPED)
        _CASE(CUDA_ERROR_STUB_LIBRARY)
        _CASE(CUDA_ERROR_NO_DEVICE)
        _CASE(CUDA_ERROR_INVALID_DEVICE)
        _CASE(CUDA_ERROR_DEVICE_NOT_LICENSED)
        _CASE(CUDA_ERROR_INVALID_IMAGE)
        _CASE(CUDA_ERROR_INVALID_CONTEXT)
        _CASE(CUDA_ERROR_CONTEXT_ALREADY_CURRENT)
        _CASE(CUDA_ERROR_MAP_FAILED)
        _CASE(CUDA_ERROR_UNMAP_FAILED)
        _CASE(CUDA_ERROR_ARRAY_IS_MAPPED)
        _CASE(CUDA_ERROR_ALREADY_MAPPED)
        _CASE(CUDA_ERROR_NO_BINARY_FOR_GPU)
        _CASE(CUDA_ERROR_ALREADY_ACQUIRED)
        _CASE(CUDA_ERROR_NOT_MAPPED)
        _CASE(CUDA_ERROR_NOT_MAPPED_AS_ARRAY)
        _CASE(CUDA_ERROR_NOT_MAPPED_AS_POINTER)
        _CASE(CUDA_ERROR_ECC_UNCORRECTABLE)
        _CASE(CUDA_ERROR_UNSUPPORTED_LIMIT)
        _CASE(CUDA_ERROR_CONTEXT_ALREADY_IN_USE)
        _CASE(CUDA_ERROR_PEER_ACCESS_UNSUPPORTED)
        _CASE(CUDA_ERROR_INVALID_PTX)
        _CASE(CUDA_ERROR_INVALID_GRAPHICS_CONTEXT)
        _CASE(CUDA_ERROR_NVLINK_UNCORRECTABLE)
        _CASE(CUDA_ERROR_JIT_COMPILER_NOT_FOUND)
        _CASE(CUDA_ERROR_JIT_COMPILATION_DISABLED)
        _CASE(CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY)
        _CASE(CUDA_ERROR_INVALID_SOURCE)
        _CASE(CUDA_ERROR_FILE_NOT_FOUND)
        _CASE(CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND)
        _CASE(CUDA_ERROR_SHARED_OBJECT_INIT_FAILED)
        _CASE(CUDA_ERROR_OPERATING_SYSTEM)
        _CASE(CUDA_ERROR_INVALID_HANDLE)
        _CASE(CUDA_ERROR_ILLEGAL_STATE)
        _CASE(CUDA_ERROR_NOT_FOUND)
        _CASE(CUDA_ERROR_NOT_READY)
        _CASE(CUDA_ERROR_ILLEGAL_ADDRESS)
        _CASE(CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES)
        _CASE(CUDA_ERROR_LAUNCH_TIMEOUT)
        _CASE(CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING)
        _CASE(CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED)
        _CASE(CUDA_ERROR_PEER_ACCESS_NOT_ENABLED)
        _CASE(CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE)
        _CASE(CUDA_ERROR_CONTEXT_IS_DESTROYED)
        _CASE(CUDA_ERROR_ASSERT)
        _CASE(CUDA_ERROR_TOO_MANY_PEERS)
        _CASE(CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED)
        _CASE(CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED)
        _CASE(CUDA_ERROR_HARDWARE_STACK_ERROR)
        _CASE(CUDA_ERROR_ILLEGAL_INSTRUCTION)
        _CASE(CUDA_ERROR_MISALIGNED_ADDRESS)
        _CASE(CUDA_ERROR_INVALID_ADDRESS_SPACE)
        _CASE(CUDA_ERROR_INVALID_PC)
        _CASE(CUDA_ERROR_LAUNCH_FAILED)
        _CASE(CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE)
        _CASE(CUDA_ERROR_NOT_PERMITTED)
        _CASE(CUDA_ERROR_NOT_SUPPORTED)
        _CASE(CUDA_ERROR_SYSTEM_NOT_READY)
        _CASE(CUDA_ERROR_SYSTEM_DRIVER_MISMATCH)
        _CASE(CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE)
        _CASE(CUDA_ERROR_MPS_CONNECTION_FAILED)
        _CASE(CUDA_ERROR_MPS_RPC_FAILURE)
        _CASE(CUDA_ERROR_MPS_SERVER_NOT_READY)
        _CASE(CUDA_ERROR_MPS_MAX_CLIENTS_REACHED)
        _CASE(CUDA_ERROR_MPS_MAX_CONNECTIONS_REACHED)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_INVALIDATED)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_MERGE)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_UNMATCHED)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_UNJOINED)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_ISOLATION)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_IMPLICIT)
        _CASE(CUDA_ERROR_CAPTURED_EVENT)
        _CASE(CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD)
        _CASE(CUDA_ERROR_TIMEOUT)
        _CASE(CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE)
        _CASE(CUDA_ERROR_EXTERNAL_DEVICE)
        _CASE(CUDA_ERROR_UNKNOWN)
        default:*pStr = NULL; return CUDA_ERROR_INVALID_VALUE;
	}
	return CUDA_SUCCESS;
}


CUresult CUDAAPI cuDriverGetVersion(int *driverVersion) {
    *driverVersion = CUDA_VERSION;
    return CUDA_SUCCESS;
}

CUresult CUDAAPI cuGetProcAddress(const char *symbol, void **pfn, int cudaVersion, cuuint64_t flags) {
    cudadrv_log_err("not implemented %s %lx", symbol, flags);
    return CUDA_ERROR_NOT_SUPPORTED;
}