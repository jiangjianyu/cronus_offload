

/**
 * \defgroup CUDA_DEVICE Device Management
 *
 * ___MANBRIEF___ device management functions of the low-level CUDA driver API
 * (___CURRENT_FILE___) ___ENDMANBRIEF___
 *
 * This section describes the device management functions of the low-level
 * CUDA driver application programming interface.
 *
 * @{
 */

enclave {
    trusted {
        public CUresult cuCtxCreate([out]CUcontext *pctx, unsigned int flags, CUdevice dev);
        public CUresult cuCtxCreate_v3([out]CUcontext *pctx, [in,count=numParams]CUexecAffinityParam *paramsArray, int numParams, unsigned int flags, CUdevice dev);
        public CUresult cuCtxDestroy(CUcontext ctx);
        public CUresult cuCtxPushCurrent(CUcontext ctx);
        public CUresult cuCtxPopCurrent([out]CUcontext *pctx);
        public CUresult cuCtxSetCurrent(CUcontext ctx);
        public CUresult cuCtxGetCurrent([out]CUcontext *pctx);
        public CUresult cuCtxGetDevice([out]CUdevice *device);
        public CUresult cuCtxGetFlags([out]unsigned int *flags);
        public CUresult cuCtxSynchronize(void);
        public CUresult cuCtxSetLimit(CUlimit limit, size_t value);
        public CUresult cuCtxGetLimit([out]size_t *pvalue, CUlimit limit);
        public CUresult cuCtxGetCacheConfig([out]CUfunc_cache *pconfig);
        public CUresult cuCtxSetCacheConfig(CUfunc_cache config);
        public CUresult cuCtxGetSharedMemConfig([out]CUsharedconfig *pConfig);
        public CUresult cuCtxSetSharedMemConfig(CUsharedconfig config);
        public CUresult cuCtxGetApiVersion(CUcontext ctx, [out]unsigned int *version);
        public CUresult cuCtxGetStreamPriorityRange([out]int *leastPriority, [out]int *greatestPriority);
        public CUresult cuCtxResetPersistingL2Cache(void);
        public CUresult cuCtxGetExecAffinity([out]CUexecAffinityParam *pExecAffinity, CUexecAffinityType type);

    };
};