
/* Cublas vector/matrix */

enclave {
    trusted {
        public cublasStatus_t cublasSetVector(int n, int elemSize, [in,size=elemSize,count=n]const void* x, int incx, [user_check]void* devicePtr, int incy);
        public cublasStatus_t cublasGetVector(int n, int elemSize, [user_check]const void* x, int incx, [out,size=elemSize,count=n]void* y, int incy);

        public cublasStatus_t cublasSetMatrix(int rows, int cols, int elemSize, [in,size=elemSize,count=rows,length=cols]const void* A, int lda, [user_check]void* B, int ldb);
        public cublasStatus_t cublasGetMatrix(int rows, int cols, int elemSize, [user_check]const void* A, int lda, [out,size=elemSize,count=rows,length=cols]void* B, int ldb);

        // public cublasStatus_t cublasSetVectorAsync(
        //     int n, int elemSize, const void* hostPtr, int incx, void* devicePtr, int incy, cudaStream_t stream);
        // public cublasStatus_t cublasGetVectorAsync(
        //     int n, int elemSize, const void* devicePtr, int incx, void* hostPtr, int incy, cudaStream_t stream);

        // public cublasStatus_t
        // cublasSetMatrixAsync(int rows, int cols, int elemSize, const void* A, int lda, void* B, int ldb, cudaStream_t stream);
        // public cublasStatus_t
        // cublasGetMatrixAsync(int rows, int cols, int elemSize, const void* A, int lda, void* B, int ldb, cudaStream_t stream);

        // public void cublasXerbla(const char* srName, int info);

    };
};